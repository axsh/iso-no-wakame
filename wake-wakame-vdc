#!/opt/axsh/wakame-vdc/ruby/bin/ruby

require 'pp'
require 'fileutils'
require 'logger'

module FileUtils
  def self.sed_i(file, pattern, replacement)
    File.open(file, "r") do |f_in|
      buf = f_in.read
      buf.gsub!(pattern, replacement)
      File.open(file, "w") do |f_out|
        f_out.write(buf)
      end
    end
  end
end

module WakeWakameVdc
   module UI
      class Gdialog

         def initialize
         end

         def escape?
            constants = WakeWakameVdc::Constants.new
            yesno(constants.messages[:escape])
         end

         def radiolist(msg, columns: nil, rows: nil, escape: false)
            column_size = 0
            row_args = ""
            rows.each do |row|
               column_size = row.size if column_size < row.size
               row_args += row[-1].to_s
               row_args += ' "'
               row_args += row[0..-2].join('" "')
               row_args += '" '
            end
            column_args = "--column '' " * column_size
            #puts "zenity --list --text #{msg} --radiolist #{column_args} #{row_args}"
            result = `zenity --list --text "#{msg}" --radiolist #{column_args} #{row_args}`
            if escape
               exit if escape?
               result = radiolist(msg, columns, rows, escape)
            end if '' == result
            return result.chomp
         end

         def inputbox(msg, escape: false)
            result = `zenity --entry --text "#{msg}"`
            if escape
               exit if escape?
               result = inputbox(msg, escape)
            end if '' == result
            return result
         end
   
         def msgbox(msg, escape: false)
            `zenity --info --text "#{msg}"`
            result = 0 == $?.to_i
            if escape
               exit if escape?
               result = msgbox(msg, escape)
            end unless result
            return result
         end
   
         def yesno(msg, escape: false)
            `zenity --question --text "#{msg}"`
            result = 0 == $?.to_i
            if escape
               exit if escape?
               result = yesno(msg, escape)
            end unless result
            return result
         end

         def progress(msg, title: title, cmd: cmd, escape: false)
            `#{cmd} | zenity --progress --title="#{title}" --text="#{msg}" --percentage=0 --auto-close`
            result = 0 == $?.to_i
            if escape
               exit if escape?
               result = yesno(msg, escape)
            end unless result
            return result
         end
      end

      class Dialog
         require 'rdialog'
   
         def initialize
            @dialog = RDialog.new
         end

         def escape?
            constants = WakeWakameVdc::Constants.new
            yesno(constants.messages[:escape])
         end
   
         def radiolist(msg, columns: nil, rows: nil, escape: false)
            result = @dialog.radiolist(msg, rows)
            if escape
               exit if escape?
               result = radiolist(msg, columns, rows, escape)
            end unless result
            return result
         end
   
         def inputbox(msg, escape: false)
            result = @dialog.inputbox(msg)
            if escape
               exit if escape?
               result = inputbox(msg, escape)
            end unless result
            return result
         end
   
         def msgbox(msg, escape: false)
            result = @dialog.msgbox(msg)
            if escape
               exit if escape?
               result = msgbox(msg, escape)
            end unless result
            return result
         end
   
         def yesno(msg, escape: false)
            result = @dialog.yesno(msg)
            if escape
               exit if escape?
               result = yesno(msg, escape)
            end unless result
            return result
         end
   
      end
   end

   class Config
      def initialize(host: '127.0.0.1', port: 4001)
         require 'etcd'
         @etcd = Etcd.client(host: host, port: port)
      end

      def [](category, param)
         begin
            result = @etcd.get("/#{category.to_s}/#{param.to_s}").value
         rescue Etcd::KeyNotFound => e
            result = []
         end
         return result.chomp
      end

      def []=(category, param, value)
         @etcd.set("/#{category.to_s}/#{param.to_s}", value: value.chomp)
      end

      def retrieve_hva_hosts()
         hosts = []
         begin
            @etcd.get('/hva/hosts').node.children.each do |node|
               hosts << node.key.sub(%r|^/hva/hosts/|, '')
            end
         rescue Etcd::KeyNotFound => e
            hosts = []
         end
         return hosts
      end

   end

   class Networking
      def initialize(distro: 'centos')
         # distro are 'centos', 'ubuntu', 'gentoo'
         (self.methods - WakeWakameVdc::Networking.methods).each do |method_list|
            if /.*_#{distro}$/ =~ method_list
               eval "alias #{method_list.to_s.sub(/_#{distro}$/, '')} #{method_list}"
            end
         end
         @config = WakeWakameVdc::Config.new
         @constants = WakeWakameVdc::Constants.new
         if ENV['DISPLAY']
            @dialog = WakeWakameVdc::UI::Gdialog.new
         else
            @dialog = WakeWakameVdc::UI::Dialog.new
         end
         #FIXME
         @cidrs = {
            :rfc5737_1 => {:ip => '192.0.2.1', :prefix => 24,
                  :nm => '255.255.255.0', :nw => '192.0.2.0',
                  :dhcp_min => '192.0.2.10', :dhcp_max => '192.0.2.200',
                  :hva_dhcp_min => '192.0.2.10', :hva_dhcp_max => '192.0.2.19',
                  :vm_dhcp_min => '192.0.2.20', :vm_dhcp_max => '192.0.2.250',
            },
            :rfc5737_2 => {:ip => '198.51.100.1', :prefix => 24,
                  :nm => '255.255.255.0', :nw => '198.51.100.0',
                  :dhcp_min => '198.51.100.10', :dhcp_max => '198.51.100.200',
                  :hva_dhcp_min => '198.51.100.10', :hva_dhcp_max => '198.51.100.19',
                  :vm_dhcp_min => '198.51.100.20', :vm_dhcp_max => '198.51.100.250',
            },
            :rfc5737_3 => {:ip => '203.0.113.1', :prefix => 24,
                  :nm => '255.255.255.0', :nw => '203.0.113.0',
                  :dhcp_min => '203.0.113.10', :dhcp_max => '203.0.113.200',
                  :hva_dhcp_min => '203.0.113.10', :hva_dhcp_max => '203.0.113.19',
                  :vm_dhcp_min => '203.0.113.20', :vm_dhcp_max => '203.0.113.250',
            },
            :rfc1918_1 => {:ip => '10.0.0.1', :prefix => 8, 
                  :nm => '255.0.0.0', :nw => '10.0.0.0', 
                  :dhcp_min => '10.0.0.10', :dhcp_max => '10.0.0.200',
                  :hva_dhcp_min => '10.0.0.10', :hva_dhcp_max => '10.0.0.19',
                  :vm_dhcp_min => '10.0.0.20', :vm_dhcp_max => '10.0.0.250',
            },
            :rfc1918_2 => {:ip => '172.16.0.1', :prefix => 12,
                  :nm => '255.240.0.0', :nw => '172.16.0.0',
                  :dhcp_min => '172.16.0.10', :dhcp_max => '172.16.0.200',
                  :hva_dhcp_min => '172.16.0.10', :hva_dhcp_max => '172.16.0.19',
                  :vm_dhcp_min => '172.16.0.20', :vm_dhcp_max => '172.16.0.250',
            },
            :rfc1918_3 => {:ip => '192.168.0.1', :prefix => 16,
                  :nm => '255.255.0.0', :nw => '192.168.0.0',
                  :dhcp_min => '192.168.0.10', :dhcp_max => '192.168.0.200',
                  :hva_dhcp_min => '192.168.0.10', :hva_dhcp_max => '192.168.0.19',
                  :vm_dhcp_min => '192.168.0.20', :vm_dhcp_max => '192.168.0.250',
            }
         }
         @log = Logger.new('/var/log/wake-wakame-vdc.log')
         @log.level = Logger::DEBUG
      end

      def list_interfaces_centos
         nics = `ls -1 /sys/class/net/`.split("\n")
         nics.delete('lo')
         return nics
      end

      def list_linked_interfaces_centos
         linked_interfaces = []
         nics = `/sbin/ip a | /bin/grep "^[0-9]*:" | /bin/awk '{print $2}' | /usr/bin/tr -d ':' | /bin/grep -v ^lo`
         nics.split("\n").each do |nic|
            linked_interfaces << nic.chomp if 1 == `/sbin/ethtool #{nic} | /bin/grep "Link detected: yes" | /usr/bin/wc -l`.chomp.to_i
         end
         return linked_interfaces
      end

      def list_ip_addresses_centos
         ip_addresses = []
         list_linked_interfaces.each do |nic|
            result = `/sbin/ip -f inet addr show dev #{nic} | grep inet | awk '{print $2}'`
            result.split("\n").each do |segment|
               ip, prefix = segment.split('/')
               ip_addresses << {:ip => ip, :prefix => prefix}
            end
         end
         return ip_addresses
      end

      def make_network_interface_centos(ip: '169.254.1.1', nm: '255.255.255.255', gw: nil, device: 'eth0', dhcp: false, ether_type: 'Ethernet')
         @log.debug("make_network_interface_centos() ip: #{ip}")
         @log.debug("make_network_interface_centos() nm: #{nm}")
         @log.debug("make_network_interface_centos() gw: #{gw}")
         @log.debug("make_network_interface_centos() device: #{device}")
         @log.debug("make_network_interface_centos() dhcp: #{dhcp}")
         @log.debug("make_network_interface_centos() ether_type: #{ether_type}")
         File.open("#{@constants.network_conf}ifcfg-#{device}", 'w') do |file|
            file.puts(<<"EOF")
DEVICE="#{device}"
NM_CONTROLLED="no"
ONBOOT="yes"
TYPE="#{ether_type}"
EOF
            if dhcp
               file.puts "BOOTPROTO=\"dhcp\""
            else
               file.puts(<<"EOF")
BOOTPROTO="static"
IPADDR="#{ip}"
NETMASK="#{nm}"
EOF
            end
            file.puts "GATEWAY=\"#{gw}\"" if gw
         end
      end

      def make_bridge_and_attach_physical_interface_centos(ip: '169.254.1.1', nm: '255.255.255.255', gw: nil, physical: 'eth0', bridge: 'br0', dhcp: false)
         @log.debug("make_bridge_and_attach_physical_interface_centos() ip: #{ip}")
         @log.debug("make_bridge_and_attach_physical_interface_centos() nm: #{nm}")
         @log.debug("make_bridge_and_attach_physical_interface_centos() gw: #{gw}")
         @log.debug("make_bridge_and_attach_physical_interface_centos() physical: #{physical}")
         @log.debug("make_bridge_and_attach_physical_interface_centos() dhcp: #{dhcp}")
         @log.debug("make_bridge_and_attach_physical_interface_centos() bridge: #{bridge}")
         File.open("#{@constants.network_conf}ifcfg-#{bridge}", 'w') do |file|
            file.puts(<<"EOF")
DEVICE="#{bridge}"
NM_CONTROLLED="no"
ONBOOT="yes"
TYPE="Bridge"
EOF
            if dhcp
               file.puts "BOOTPROTO=\"dhcp\""
            else
               file.puts(<<"EOF")
BOOTPROTO="static"
IPADDR="#{ip}"
NETMASK="#{nm}"
EOF
            end
            file.puts "GATEWAY=\"#{gw}\"" if gw
         end
         File.open("#{@constants.network_conf}ifcfg-#{physical}", 'w') do |file|
            file.puts(<<"EOF")
DEVICE="#{physical}"
ONBOOT="yes"
BRIDGE="#{bridge}"
NM_CONTROLLED="no"
EOF
         end
      end

      def dhcpoffer_centos(nic)
         ip = nil
         result = `/sbin/dhclient -1 -timeout 5 -v -lf /var/lib/dhclient/dhclient-#{nic}.leases -pf /var/run/dhclient-#{nic}.pid #{nic} 2>&1`
         status = $?
         @log.debug("dhcpoffer() result: #{result}")
         @log.debug("dhcpoffer() status: #{status}")
         @log.debug("dhcpoffer() exitstatus: #{status.exitstatus}")
         if 0 == status.exitstatus
            if result =~ /.*\nbound to ([0-9.]*) -- .*/
               ip = $1
               @log.debug("dhcpoffer() ip: #{ip}")
            end
            `/sbin/dhclient -r #{nic}`
         end
         return ip
      end

      def guess_unused_segment(ip_addresses = [])
         ip_addresses = list_ip_addresses if 0 == ip_addresses.size
         ip_addresses.each do |segment|
            case segment[:ip]
            when /^192\.0\.2\./
               @cidrs.delete(:rfc5737_1)
            when /^198\.51\.100\./
               @cidrs.delete(:rfc5737_2)
            when /^203\.0\.113\./
               @cidrs.delete(:rfc5737_3)
            when /^10\./
               @cidrs.delete(:rfc1918_1)
            when /^172\.16\./
               @cidrs.delete(:rfc1918_2)
            when /^192\.168\./
               @cidrs.delete(:rfc1918_3)
            end
         end
         return @cidrs
      end

      def network_restart_centos
         `/etc/init.d/network restart`
         `/etc/init.d/sshd restart`
      end

      def boot_dnsmasq_centos(nic: 'br0')
         `echo "/usr/sbin/dnsmasq --dhcp-range=#{@config[:hva, :dhcp_min]},#{@config[:hva, :dhcp_max]} --dhcp-boot=pxelinux.0 --enable-tftp --tftp-root=/tftpboot --interface=#{nic}" >> /var/log/wakame-vdc.livedvd.log`
         result = `/usr/sbin/dnsmasq --dhcp-range=#{@config[:hva, :dhcp_min]},#{@config[:hva, :dhcp_max]} --dhcp-boot=pxelinux.0 --enable-tftp --tftp-root=/tftpboot --interface=#{nic}`
      end

      def terminate_dnsmasq_centos
         if FileTest.exist?(@constants.dnsmasq_pid)
            # @dialog.msgbox(@constants.messages[:confirm_terminate_dnsmasq])
            # @dialog.msgbox(@constants.messages[:reconfirm_terminate_dnsmasq])
            pid = File.open(@constants.dnsmasq_pid, 'r').read.chomp
            `/bin/kill -SIGTERM #{pid}`
            `rm -f #{@constants.dnsmasq_pid}`
         end
      end

      def create_pxe_cfg_centos
         pxe_cfg = <<-"EOF"
default pxeboot
menu background splash.jpg
menu vshift 10
menu width 80
timeout 10
menu title Wakame-VDC LiveDVD
label pxeboot
	menu label Wakame-VDC HVA
#	kernel iso/isolinux/vmlinuz0
        KERNEL vmlinuz0
	APPEND rootflags=loop initrd=initrd0.img root=live:/Wakame-VDC.LiveDVD.iso rootfstype=auto ro liveimg quiet  rhgb rd_NO_LUKS rd_NO_MD rd_NO_DM ip=dhcp etcd_host=#{@config[:dcmgr, :host_ip]} etcd_port=4001 3
#	APPEND rootflags=loop initrd=initrd0.img root=live:/Wakame-VDC.LiveDVD.iso rootfstype=auto ro liveimg quiet  rhgb rd_NO_LUKS rd_NO_MD rd_NO_DM
#	append initrd=iso/isolinux/initrd0.img fetch=tftp://#{@config[:dcmgr, :host_ip]}/iso/LiveOS/squashfs.img root=live:CDLABEL=Wakame-VDC.LiveDVD rootfstype=auto ip=dhcp ro liveimg quiet  rhgb rd_NO_LUKS rd_NO_MD rd_NO_DM etcd_host=#{@config[:dcmgr, :host_ip]} etcd_port=4001
onerror localboot -1
         EOF
         File.open("/tftpboot/pxelinux.cfg/default", 'w') do |file|
            file.puts pxe_cfg
         end
      end

      def subnetcalc(ip: '127.0.0.1', nm: '255.255.255.0')
         nw_address = ''
         nw_prefix = ''
         `subnetcalc #{ip} #{nm} -n`.each_line do |line|
            if /^Network / =~ line
               nw_address, nw_prefix = line.chomp.split("=")[1].split("/")
               nw_address.strip!
               nw_prefix.strip!
               break
            end
         end
         return {:nw_address => nw_address, :nw_prefix => nw_prefix}
      end
   end

   class WakeUp
      def initialize(distro: 'centos')
         # distro are 'centos', 'ubuntu', 'gentoo'
         (self.methods - WakeWakameVdc::WakeUp.methods).each do |method_list|
            if /.*_#{distro}$/ =~ method_list
               eval "alias #{method_list.to_s.sub(/_#{distro}$/, '')} #{method_list}"
            end
         end
         #@config = WakeWakameVdc::Config.new
         #@constants = WakeWakameVdc::Constants.new
      end

      def start_rabbitmq_centos
         result = `/sbin/service rabbitmq-server start`
         case result
         when "Starting rabbitmq-server: RabbitMQ is currently running\nrabbitmq-server.\n"
            return true
         when "Starting rabbitmq-server: SUCCESS\nrabbitmq-server.\n"
            return true
         else
            return false
         end
         #"Stopping rabbitmq-server: rabbitmq-server.\n"
      end

      def start_mysql_centos
         result = `/sbin/service mysqld start`
         case result
         when "Starting mysqld:  \e[60G[\e[0;32m  OK  \e[0;39m]\r\n"
            return true
         else
            return false
         end
      end

      def start_vdc_dcmgr_centos
         result = `/sbin/start vdc-dcmgr`
         case result.chomp
         when /^vdc-dcmgr start\/running, process [0-9]*$/
            return true
         else
            return false
         end
      end

      def start_vdc_collector_centos
         result = `/sbin/start vdc-collector`
         case result.chomp
         when /^vdc-collector start\/running, process [0-9]*$/
            return true
         else
            return false
         end
      end

      def start_vdc_hva_centos
         result = `/sbin/start vdc-hva`
         case result.chomp
         when /^vdc-hva start\/running, process [0-9]*$/
            return true
         else
            return false
         end
      end

      def start_vdc_webui_centos
         #FIXME
         result = `/sbin/start vdc-webui`
         if "" == result.chomp
            result = `/sbin/status vdc-webui`
            if "vdc-webui stop/waiting" == result.chomp
               return start_vdc_webui
            end
         elsif /^vdc-webui start\/running, process [0-9]*$/ =~ result.chomp
            return true
         else
            return false
         end
      end

      def add_hva(node_id, hypervisor: 'kvm')
         cmd =<<"EOF"
/opt/axsh/wakame-vdc/dcmgr/bin/vdc-manage host add hva.#{node_id} \
--uuid hn-#{node_id} --display-name "hva #{node_id}" \
--cpu-cores 100 --memory-size 10240 --hypervisor #{hypervisor} \
--arch x86_64 --disk-space 102400 --force
EOF
         result = `#{cmd}`
      end

      def config_hva_conf(param, value)
         src = %r|^#{param} = .*|
         dst = "#{param} = #{value}"
         FileUtils.sed_i('/etc/wakame-vdc/hva.conf', src, dst)
      end

      def config_instance_spec(hypervisor: 'kvm')
         specs = {}
         specs[:openvz] =<<"EOF"
vz.small:
  cpu_cores: 1
  memory_size: 256
  hypervisor: 'openvz'
  quota_weight: 1.0
vz.large:
  cpu_cores: 2
  memory_size: 256
  hypervisor: 'openvz'
  quota_weight: 2.0
vz.xlarge:
  cpu_cores: 2
  memory_size: 1536
  hypervisor: 'openvz'
  quota_weight: 2.0
EOF
         specs[:kvm] =<<"EOF"
kvm.small:
  cpu_cores: 1
  memory_size: 256
  hypervisor: 'kvm'
  quota_weight: 1.0
kvm.large:
  cpu_cores: 2
  memory_size: 256
  hypervisor: 'kvm'
  quota_weight: 2.0
kvm.xlarge:
  cpu_cores: 2
  memory_size: 1536
  hypervisor: 'kvm'
  quota_weight: 2.0
EOF
         specs[:lxc] =<<"EOF"
lxc.small:
  cpu_cores: 1
  memory_size: 256
  hypervisor: 'lxc'
  quota_weight: 1.0
lxc.large:
  cpu_cores: 2
  memory_size: 256
  hypervisor: 'lxc'
  quota_weight: 2.0
lxc.xlarge:
  cpu_cores: 2
  memory_size: 1536
  hypervisor: 'lxc'
  quota_weight: 2.0
EOF
         File.open('/etc/wakame-vdc/dcmgr_gui/instance_spec.yml', 'w') do |file|
            file.puts specs[hypervisor.to_sym]
         end
      end

      def del_wake_wakame_vdc_launcher(home: '/home/wakame')
         FileUtils.rm_f([home, 'Desktop/WakeWakameVDC.desktop'].join('/'))
      end

      def gen_wake_wakame_vdc_launcher(home: '/home/wakame')
         File.open([home, 'Desktop/WakeWakameVDC.desktop'].join('/'), 'w') do |file|
            file.puts(<<"EOF")
[Desktop Entry]
Version=1.0
Type=Application
Name=WakeWakameVDC
Comment=
Exec=sudo /usr/local/bin/wake-wakame-vdc manual_1box
Icon=/usr/share/icons/gnome/48x48/apps/wakamevdc-logo.png
Path=
Terminal=false
StartupNotify=false
GenericName=
EOF
         end
      end

      def gen_webui_shortcut(home: '/home/wakame')
         File.open([home, 'Desktop/Wakame-VDC.WebUI.desktop'].join('/'), 'w') do |file|
            file.puts(<<"EOF")
[Desktop Entry]
Version=1.0
Type=Link
Name=Wakame-VDC WebUI
Comment=
Icon=/usr/share/icons/gnome/48x48/apps/wakamevdc-logo.png
URL=http://127.0.0.1:9000
EOF
         end
      end

      def copy_vdc_config
         FileUtils.copy '/opt/axsh/wakame-vdc/dcmgr/config/dcmgr.conf.example' '/etc/wakame-vdc/dcmgr.conf'
         FileUtils.copy '/opt/axsh/wakame-vdc/dcmgr/config/hva.conf.example' '/etc/wakame-vdc/hva.conf'
         FileUtils.copy '/opt/axsh/wakame-vdc/frontend/dcmgr_gui/config/database.yml.example' '/etc/wakame-vdc/dcmgr_gui/database.yml'
         FileUtils.copy '/opt/axsh/wakame-vdc/frontend/dcmgr_gui/config/dcmgr_gui.yml.example' '/etc/wakame-vdc/dcmgr_gui/dcmgr_gui.yml'
         FileUtils.copy '/opt/axsh/wakame-vdc/frontend/dcmgr_gui/config/instance_spec.yml.example' '/etc/wakame-vdc/dcmgr_gui/instance_spec.yml'
         FileUtils.copy '/opt/axsh/wakame-vdc/frontend/dcmgr_gui/config/load_balancer_spec.yml.example' '/etc/wakame-vdc/dcmgr_gui/load_balancer_spec.yml'
         FileUtils.copy '/opt/axsh/wakame-vdc/dcmgr/config/sta.conf.example' '/etc/wakame-vdc/sta.conf'
         FileUtils.copy '/opt/axsh/wakame-vdc/dcmgr/config/nsa.conf.example' '/etc/wakame-vdc/nsa.conf'
         FileUtils.copy '/opt/axsh/wakame-vdc/dcmgr/config/snapshot_repository.yml.example' '/etc/wakame-vdc/snapshot_repository.yml'
# sudo cp /opt/axsh/wakame-vdc/dcmgr/config/nwmongw.conf.example /etc/wakame-vdc/nwmongw.conf
# # sudo cp /opt/axsh/wakame-vdc/dcmgr/config/hma.conf.example /etc/wakame-vdc/hma.conf
# # sudo cp /opt/axsh/wakame-vdc/dcmgr/config/bksta.conf.example /etc/wakame-vdc/bksta.conf
# # sudo cp /opt/axsh/wakame-vdc/dcmgr/config/natbox.conf.example /etc/wakame-vdc/natbox.conf
#
      end

   end

   class Constants
      attr_reader :messages, :structures, :hypervisors
      attr_reader :network_conf, :pxe_cfg, :dnsmasq_pid
      attr_reader :progress_status
      def initialize(lang: 'en', distro: 'centos')
         case lang
         when 'en'
            @messages = {
               :structure => 'Please select structure of Wakame-VDC',
               :structure_type1 => 'All in one',
               :structure_type2 => 'A controller and some nodes',
               :hypervisor => 'What would you like to use as Hypervisor?',
               :hypervisor_kvm => 'Linux Kernel Virtual Machine',
               :hypervisor_lxc => 'Linux Containers (does not work in this LiveDVD)',
               :hypervisor_openvz => 'OpenVZ (does not work in this LiveDVD)',
               :host_ip => 'Please enter an IP address for host',
               :host_nm => 'Please enter a Network Mask for host',
               :host_gw => 'Please enter a Gateway for host',
               :hva_dhcp_min => 'Please enter a start address of DHCP range for HVA nodes',
               :hva_dhcp_max => 'Please enter an end address of DHCP range for HVA nodes',
               :vm_dhcp_min => 'Please enter a start address of DHCP range for Instances',
               :vm_dhcp_max => 'Please enter an end address of DHCP range for Instances',
               :poweron => 'Please turning on the power of your HVA hosts and then wait a few minutes.',
               :hva_hosts => 'nodes:',
               :hva_confirm => "That\'s it?",
               :escape => 'Exit and lose any changes?',
               :confirm_terminate_dnsmasq => "If each node finished booting, please push <OK>.",
               :reconfirm_terminate_dnsmasq => "Will kill dnsmasq process.",
            }
            @structures = [
               ["Type 1", @messages[:structure_type1], true],
               ["Type 2", @messages[:structure_type2], false],
            ]
            @hypervisors = [
               ["KVM", @messages[:hypervisor_kvm], true],
               ["LXC", @messages[:hypervisor_lxc], false],
               ["OpenVZ", @messages[:hypervisor_openvz], false],
            ]
         end
         case distro
         when 'centos'
            @network_conf = '/etc/sysconfig/network-scripts/'
            @pxe_cfg = '/tftpboot/pxelinux.cfg/default'
            @dnsmasq_pid = '/var/run/dnsmasq.pid'
            @progress_status = '/tmp/wake-wakame-vdc.progress'
         end
      end
   end

end

def auto_1box
   @config[:global, :structure] = 'Type 1'
   @config[:global, :hypervisor] = 'KVM'
   result = false
   nic = @network.list_linked_interfaces[0]
   nic = 'eth0' unless nic
   @network.make_network_interface(device: nic, dhcp: true)
   @network.network_restart
   if 0 < @network.list_ip_addresses.size
      @inner_net = @network.guess_unused_segment.to_a[0][1]
      @network.make_network_interface(ip: @inner_net[:ip], nm: @inner_net[:nm], device: 'br0', ether_type: 'Bridge')
      @network.network_restart
      result = true
   end
   return result
end

def auto_boxes
   result = false
   `echo "" > #{@constants.progress_status}`
   fork do
      @dialog.progress('configure network', title: 'Wake Wakame-VDC', cmd: "/usr/local/bin/zenity-progress-conditioner.rb #{@constants.progress_status}")
   end
   nics = @network.list_interfaces
   pp "auto_boxes() nics: #{nics}"
   dhcp_nics = []
   `echo "2" >> #{@constants.progress_status}`
   nics.delete_if do |nic|
      pp "auto_boxes() nic: #{nic}"
      ip = @network.dhcpoffer(nic)
      pp "auto_boxes() ip: #{ip}"
      if ip
         @network.guess_unused_segment([{:ip => ip}])
         dhcp_nics << nic
      end
   end
   `echo "4" >> #{@constants.progress_status}`
   return auto_1box if 0 == nics.size
   @config[:global, :hypervisor] = 'KVM'
   pp "auto_boxes() dhcp_nics.size: #{dhcp_nics.size}"
   pp "auto_boxes() dhcp_nics: #{dhcp_nics}"
   if 0 < dhcp_nics.size
      dhcp_nics.each do |nic| 
         pp "auto_boxes() nic: #{nic}"
         #@network.make_network_interface(device: nic, dhcp: true)
         @network.make_bridge_and_attach_physical_interface(physical: nic, bridge: nic.gsub(/eth/, 'br'), dhcp: true)
      end
   else
      dcmgr_net = @network.guess_unused_segment.to_a[0][1]
      @config[:dcmgr, :host_ip] = dcmgr_net[:ip]
      @config[:dcmgr, :host_nm] = dcmgr_net[:nm]
      @config[:hva, :dhcp_min] = dcmgr_net[:hva_dhcp_min]
      @config[:hva, :dhcp_max] = dcmgr_net[:hva_dhcp_max]
      @config[:vm, :dhcp_min] = dcmgr_net[:vm_dhcp_min]
      @config[:vm, :dhcp_max] = dcmgr_net[:vm_dhcp_max]
      nic = nics.shift
      @network.make_bridge_and_attach_physical_interface(ip: @config[:dcmgr, :host_ip], nm: @config[:dcmgr, :host_nm], physical: nic, bridge: nic.gsub(/eth/, 'br'))
   end
   `echo "6" >> #{@constants.progress_status}`
   @network.network_restart
   `echo "8" >> #{@constants.progress_status}`

   @config[:global, :structure] = @dialog.radiolist(@constants.messages[:structure], rows: @constants.structures, escape: true)
   if 'Type 1' == @config[:global, :structure]
      `echo "10" >> #{@constants.progress_status}`
      if 0 < @network.list_ip_addresses.size
         @inner_net = @network.guess_unused_segment.to_a[0][1]
         @network.make_network_interface(ip: @inner_net[:ip], nm: @inner_net[:nm], device: 'bridge0', ether_type: 'Bridge')
         @network.network_restart
         result = true
      end
      `echo "20" >> #{@constants.progress_status}`
      return result
   elsif 'Type 2' == @config[:global, :structure]
      if 0 < dhcp_nics.size
         hva_net = @network.guess_unused_segment.to_a[0][1]
         @config[:dcmgr, :host_ip] = hva_net[:ip]
         @config[:dcmgr, :host_nm] = hva_net[:nm]
         @config[:hva, :dhcp_min] = hva_net[:hva_dhcp_min]
         @config[:hva, :dhcp_max] = hva_net[:hva_dhcp_max]
         @config[:vm, :dhcp_min] = hva_net[:vm_dhcp_min]
         @config[:vm, :dhcp_max] = hva_net[:vm_dhcp_max]
         nic = nics.shift
         @network.make_bridge_and_attach_physical_interface(ip: @config[:dcmgr, :host_ip], nm: @config[:dcmgr, :host_nm], physical: nic, bridge: nic.gsub(/eth/, 'br'))
         @network.network_restart
         @network.create_pxe_cfg
         @network.boot_dnsmasq(nic: nic.gsub(/eth/, 'br'))
         yesno = false
         until yesno do
            @dialog.msgbox(@constants.messages[:poweron])
            hva_hosts = @config.retrieve_hva_hosts
            next unless hva_hosts
            hva_hosts_list = hva_hosts.join("\n")
            @dialog.msgbox(@constants.messages[:hva_hosts] + "\n" + hva_hosts_list, escape: true)
            yesno = @dialog.msgbox(@constants.messages[:hva_confirm])
         end
         exit unless yesno
      end
   end
   @network.terminate_dnsmasq
   subnet = @network.subnetcalc(ip: @config[:dcmgr, :host_ip], nm: @config[:dcmgr, :host_nm])
   @inner_net = {}
   @inner_net[:ip] = @config[:dcmgr, :host_ip]
   @inner_net[:nw] = subnet[:nw_address]
   @inner_net[:prefix] = subnet[:nw_prefix]
   @inner_net[:vm_dhcp_min] = @config[:vm, :dhcp_min]
   @inner_net[:vm_dhcp_max] = @config[:vm, :dhcp_max]
   `echo "10" >> #{@constants.progress_status}`
   `echo "20" >> #{@constants.progress_status}`
   return yesno
end

def manual_1box
   #@config[:global, :structure] = @dialog.radiolist(@constants.messages[:structure], rows: @constants.structures, escape: true)
   #@config[:global, :hypervisor] = @dialog.radiolist(@constants.messages[:hypervisor], rows: @constants.hypervisors, escape: true)
   @config[:global, :structure] = 'Type 1'
   @config[:global, :hypervisor] = 'KVM'
   @config[:dcmgr, :host_ip] = @dialog.inputbox(@constants.messages[:host_ip], escape: true)
   @config[:dcmgr, :host_nm] = @dialog.inputbox(@constants.messages[:host_nm], escape: true)
   @config[:dcmgr, :host_gw] = @dialog.inputbox(@constants.messages[:host_gw], escape: true)
   #@config[:vm, :dhcp_min] = @dialog.inputbox(@constants.messages[:vm_dhcp_min], escape: true)
   #@config[:vm, :dhcp_max] = @dialog.inputbox(@constants.messages[:vm_dhcp_max], escape: true)
   nic = @network.list_linked_interfaces[0]
   nic = 'eth0' unless nic
   confirm = <<"EOL"
Structure: #{@config[:global, :structure]}
Hypervisor: #{@config[:global, :hypervisor]}
#{nic}\'s IP address: #{@config[:dcmgr, :host_ip]}
#{nic}\'s Subnet Mask: #{@config[:dcmgr, :host_nm]}
#{nic}\'s Gateway address: #{@config[:dcmgr, :host_gw]}
EOL
   @dialog.msgbox(confirm, escape: true)
   `echo "" > #{@constants.progress_status}`
   fork do
      @dialog.progress('configure network', title: 'Wake Wakame-VDC', cmd: "/usr/local/bin/zenity-progress-conditioner.rb #{@constants.progress_status}")
   end
   @network.make_network_interface(ip: @config[:dcmgr, :host_ip], nm: @config[:dcmgr, :host_nm], gw: @config[:dcmgr, :host_gw], device: nic, dhcp: false, ether_type: 'Ethernet')
   @network.network_restart
   `echo "10" >> #{@constants.progress_status}`
   if 0 < @network.list_ip_addresses.size
      @inner_net = @network.guess_unused_segment.to_a[0][1]
      @network.make_network_interface(ip: @inner_net[:ip], nm: @inner_net[:nm], device: 'br0', ether_type: 'Bridge')
      @network.network_restart
      result = true
   end
   `echo "20" >> #{@constants.progress_status}`
   return result
end

def manual_boxes
   @config[:global, :structure] = @dialog.radiolist(@constants.messages[:structure], rows: @constants.structures, escape: true)
   @config[:global, :hypervisor] = @dialog.radiolist(@constants.messages[:hypervisor], rows: @constants.hypervisors, escape: true)
   @config[:dcmgr, :host_ip] = @dialog.inputbox(@constants.messages[:host_ip], escape: true)
   @config[:dcmgr, :host_nm] = @dialog.inputbox(@constants.messages[:host_nm], escape: true)
   @config[:dcmgr, :host_gw] = @dialog.inputbox(@constants.messages[:host_gw], escape: true)
   @config[:vm, :dhcp_min] = @dialog.inputbox(@constants.messages[:vm_dhcp_min], escape: true)
   @config[:vm, :dhcp_max] = @dialog.inputbox(@constants.messages[:vm_dhcp_max], escape: true)
   nic = @network.list_linked_interfaces[0]
   nic = 'eth0' unless nic
   confirm = <<"EOL"
Structure: #{@config[:global, :structure]}
Hypervisor: #{@config[:global, :hypervisor]}
#{nic}\'s IP address: #{@config[:dcmgr, :host_ip]}
#{nic}\'s Subnet Mask: #{@config[:dcmgr, :host_nm]}
#{nic}\'s Gateway address: #{@config[:dcmgr, :host_gw]}
dhcp range for Instances: #{@config[:vm, :dhcp_min]} - #{@config[:vm, :dhcp_max]}
EOL
   if 'Type 2' == @config[:global, :structure]
      @config[:hva, :dhcp_min] = @dialog.inputbox(@constants.messages[:hva_dhcp_min], escape: true)
      @config[:hva, :dhcp_max] = @dialog.inputbox(@constants.messages[:hva_dhcp_max], escape: true)
      confirm += <<-"EOL"
dhcp range for Wakame-VDC HVA nodes: #{@config[:hva, :dhcp_min]} - #{@config[:hva, :dhcp_max]}
      EOL
   end

   @dialog.msgbox(confirm, escape: true)
   @network.make_bridge_and_attach_physical_interface(ip: @config[:dcmgr, :host_ip], nm: @config[:dcmgr, :host_nm], gw: @config[:dcmgr, :host_gw], physical: nic, bridge: 'br0')
   @network.network_restart
   if 'Type 2' == @config[:global, :structure]
      @network.create_pxe_cfg
      @network.boot_dnsmasq
      yesno = false
      until yesno do
         @dialog.msgbox(@constants.messages[:poweron])
         hva_hosts = @config.retrieve_hva_hosts
         next unless hva_hosts
         hva_hosts_list = hva_hosts.join("\n")
         @dialog.msgbox(@constants.messages[:hva_hosts] + "\n" + hva_hosts_list, escape: true)
         yesno = @dialog.msgbox(@constants.messages[:hva_confirm])
      end
      exit unless yesno
   end
   @network.terminate_dnsmasq
   subnet = @network.subnetcalc(ip: @config[:dcmgr, :host_ip], nm: @config[:dcmgr, :host_nm])
   @inner_net = {}
   @inner_net[:ip] = @config[:dcmgr, :host_ip]
   @inner_net[:nw] = subnet[:nw_address]
   @inner_net[:prefix] = subnet[:nw_prefix]
   @inner_net[:vm_dhcp_min] = @config[:vm, :dhcp_min]
   @inner_net[:vm_dhcp_max] = @config[:vm, :dhcp_max]
   `echo "" > #{@constants.progress_status}`
   fork do
      @dialog.progress('configure network', title: 'Wake Wakame-VDC', cmd: "/usr/local/bin/zenity-progress-conditioner.rb #{@constants.progress_status}")
   end
   `echo "10" >> #{@constants.progress_status}`
   `echo "20" >> #{@constants.progress_status}`
   return yesno
end

if ENV['DISPLAY']
   @dialog = WakeWakameVdc::UI::Gdialog.new
else
   @dialog = WakeWakameVdc::UI::Dialog.new
end
@constants = WakeWakameVdc::Constants.new
@config = WakeWakameVdc::Config.new
@network = WakeWakameVdc::Networking.new
@wakeup = WakeWakameVdc::WakeUp.new
@inner_net = nil

#result = auto_1box if :auto_1box == mode
#result = manual_1box if  :manual_1box == mode or false == result
#manual_1box unless auto_1box
if 'auto_boxes' == ARGV[0]
   unless auto_boxes
   end
elsif 'auto_1box' == ARGV[0]
   unless auto_1box
      @wakeup.gen_wake_wakame_vdc_launcher
      puts "was not able to auto start"
      exit
   end
elsif 'manual_1box' == ARGV[0]
   unless manual_1box
      puts "unknown state"
      exit
   end
elsif 'manual_boxes' == ARGV[0]
   unless manual_boxes
      puts "unknown state"
      exit
   end
end

case @config[:global, :hypervisor]
when 'LXC'
   `/bin/sed -i -e "s/hypervisor kvm/hypervisor lxc/" /usr/local/bin/setup_wakame-vdc.sh`
when 'OpenVZ'
   `/bin/sed -i -e "s/hypervisor kvm/hypervisor openvz/" /usr/local/bin/setup_wakame-vdc.sh`
end
`echo "30" >> #{@constants.progress_status}`
`echo "# invoke setup_wakame-vdc.sh" >> #{@constants.progress_status}`
#nw = network.subnetcalc(ip: config[:dcmgr, :host_ip], nm: config[:dcmgr, :host_nm])
puts "-------------------- setup_wakame-vdc.sh -------------------"
puts "IP=#{@inner_net[:ip]}"
puts "NETWORK=#{@inner_net[:nw]}"
puts "PREFIX=#{@inner_net[:prefix]}"
puts "DHCP_RANGE_START=#{@inner_net[:vm_dhcp_min]}"
puts "DHCP_RANGE_END=#{@inner_net[:vm_dhcp_max]}"
result = `IP="#{@inner_net[:ip]}" \
 NETWORK="#{@inner_net[:nw]}" \
 PREFIX="#{@inner_net[:prefix]}" \
 DHCP_RANGE_START="#{@inner_net[:vm_dhcp_min]}" \
 DHCP_RANGE_END="#{@inner_net[:vm_dhcp_max]}" \
 /usr/local/bin/setup_wakame-vdc.sh`

`echo "40" >> #{@constants.progress_status}`
pp result

@config[:hva, :boot] = "wait"

unless 'Type 2' == @config[:global, :structure]
`echo "# invoke setup_wakame-vdc.hva.sh" >> #{@constants.progress_status}`
puts "-------------------- setup_wakame-vdc.hva.sh -------------------"
result = `/usr/local/bin/setup_wakame-vdc.hva.sh`
pp result
end
`echo "50" >> #{@constants.progress_status}`

sleep 5

`echo "# configure vdc components" >> #{@constants.progress_status}`
@config.retrieve_hva_hosts.each do |hva|
   @wakeup.add_hva(hva)
end

`echo "60" >> #{@constants.progress_status}`
@wakeup.config_hva_conf('config.logging_service_host_ip', "'#{@inner_net[:ip]}'") unless 'Type 2' == @config[:global, :structure]
`echo "64" >> #{@constants.progress_status}`
`echo "# start services" >> #{@constants.progress_status}`
@wakeup.start_rabbitmq
`echo "68" >> #{@constants.progress_status}`
@wakeup.start_mysql
`echo "72" >> #{@constants.progress_status}`
@wakeup.start_vdc_dcmgr
`echo "76" >> #{@constants.progress_status}`
@wakeup.start_vdc_collector
`echo "80" >> #{@constants.progress_status}`
sleep 10
@config[:hva, :boot] = "go ahead"
@wakeup.start_vdc_hva unless 'Type 2' == @config[:global, :structure]
`echo "84" >> #{@constants.progress_status}`
sleep 5
@wakeup.config_instance_spec
`echo "88" >> #{@constants.progress_status}`
@wakeup.start_vdc_webui
`echo "90" >> #{@constants.progress_status}`

`echo "# put shortcut of wakame on desktop" >> #{@constants.progress_status}`
@wakeup.del_wake_wakame_vdc_launcher
`echo "95" >> #{@constants.progress_status}`
@wakeup.gen_webui_shortcut
`echo "100" >> #{@constants.progress_status}`
Process.waitall

